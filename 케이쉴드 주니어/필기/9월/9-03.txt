ICMP프로토콜
- UDP랑 비슷한 부분이 있다. 안 줘도 크게 영향을 받지 않는다.
- TCP연결처럼 서로 계속 연결되어야 하는게 적다

hping3 -1 192.168.0.171 --flood

hping3 -1 192.168.0.171 --flood --rand-source
- 출발지를 여러 곳으로 해서 보내면 멈춘것처럼 보인다.


PPS 공격


랜덤한 소스를 보내야된다. 보내고 kali에 오면 다시 응답을 해준다.
서버를 공격하려했는데 kali가 1번보내고 2번보내고 하니까 부하가 심하다.
서버쪽에만 부하를 주기 위한 공격이다.

hping3 -S -p 80 192.168.0.171 --flood --rand-source

공격을 하면 DDoS 테스트는 멈춰있다. 공격을 멈추면 다시 진행
프리징 현상이 나타난다. SYN을 보내면 SYN/ACK가 온다.


hping3 -S -p 80 192.168.0.171 --flood --rand-source
찍고 바로꺼도 15000개 정도 보낸다.
쭉 보면 중간중간 RST가 툭툭 나타난다.
그리고 SYN하고 SYN/ACT가 툭툭 튀어나온다.
기본적으로 SYN보내고 SYN/ACT를 받아주고 별다른 반응이 없으면 대기한다.
공격을 퍼부었을 때 DDoS에서 sudo netstat -ntp를 보면 SYN_RECV가 여러개가 있다. 그래서 힘들다.
아직까지도 현업에서는 SYN FLOOD 공격이 많이 들어온다고 한다.

ACK Flood 공격
- 다량의 공격을  빠른 시간 내에 반복적으로 하는 공격
hping3 -A 192.168.0.171 -p 80
명령에 대한 응답값을 보면 ACK다음에 RST가 나온다.
/ ACK :  ACK는 보통 SYN을 보내고 SYN/ACK를 받고 ACK를 보낸다. 이때 ACK가 하는 역할은 1. 연결에 보장 2. 요청에 대한 처리의 결과값 반환 3. 
클라이언트가 서버에 ACK를 날리면 서버가 ???상태
ACK만 발생하면 무슨 일이 있었는지 확인해야 한다. 만약 요청을 보냈는데 ACK가 안왔다던가 등
뒤늦게 밀렸던 패킷이 오는 것일 수 있다. 이것은 잘못된 패킷
끝내려고 RST를 보냈는데 ACK를 보내면 ????
응답값ACK를 클라이언트가 서버에 보내면 클라는 연결 된다고 생각 서버는 연결이 X 그래서 RST를 보내 강제로 끊어버린다. 그러한 이유로 ACK Flood 공격에서 ACK를 계속 반환한다.


표가 명확한 정답은 아니다. ICMP패킷이 방화벽에 영향을 많이 받는다.
sudo iptables -vnL
REJECT부분이 있다. 모든 패킷에 모든 경로를 
iptables가 열려있을 때 표 같은 답이 나온다.

미션!
-S : SYN
1. DDoS Test가 멈춘다.
2. 공격자가 피해자에게 SYN을 보내고 피해자가 공격자에게 SYN/ACK을 보낸다. 그 후 공격자가 RST를 보낸다. 반복
3.  
-A : ACK
1. 멈춘다.
2. SYN보내고 RST받고 반복
-F : FIN receiving이 크다. sending은 제한적
hping3 -p 80 192.168.0.171 --flood -F
1. 안멈춘다.
2. --rand-source를 하면 멈춤현상 발생
hping3 -p 80 192.168.0.171 -F
3. 방화벽 해제하면 sending 0이 된다. 방화벽 일 때 FIN보내고 Destination unreachable이 온다.
방화벽 해제하면 FIN만
-R : RST 반응 X
1. 안멈춘다.
-P : PSH 반응 X
1. 안멈춘다.
-U : URG 반응 X
1. 안멈춘다.

교재에 있는 TCP flag에 따른 Flood 공격과 응답을 확인해보고 비교하라.
1. 실제로 DDoS Test가 멈춤 현상이 발생하는지 확인
2. 와이어샤크로 패킷을 찍었을 경우 어떤 메시지를 주고 받는지 확인 //flood 옵션을 제외
3. DDoS Test 쪽에 내부 방화벽(iptables)가 서비스 해제되었을 때 변화가 있는지 확인
4. 각 플래그별 응답 메시지가 왜 서로 다르게 될까 그 이유가 무엇일까 생각해보기

##방화벽 해제 및 시작
-방화벽 해제
sudo iptables -F
- 방화벽 서비스 재시작(방화벽 룰 재 적용)
sudo service iptables restart

SYN을 제외한 공격의 경우 잘 사용하지 않는다. SYN외에는 공격에서 거의 사용하지 않는다.
주로 사용하는 DDoS 공격 : 1. SYN Flood 2. UDP Flood 3. ICMP Flood 4. 어플리케이션쪽
보통 실무에서 테스팅 할 때 사용하는 Flood공격 4가지

-----------------------------------TCP 공격-----------------------------------------------------------

ACK
1. 연결보증
2. 요청에 대한 결과 반환
3. 

클라이언트->서버
SYN(seq:1000)보낸다
보낸 후부터 상태는 SYN_SEND상태
+1
서버 -> 클라이언트
SYN/ACK(seq:2000, ack:1001)
보낸 후부터 상태는 SYN_RECV
+1
클라이언트 -> 서버
ACK(seq:1001, ack:2001)

최종 연결된 이후 클라이언트, 서버상태는 Established
서로 연결되었다는 것을 나타낸다.

"Hello" 라는 메시지를 남기고 싶다.
클라이언트 -> 서버
PSH/ACK(seq:1001, ack: 2001)
HELLO\n 개행문자 null이 포함
대문자를 포함하여 총 6 추가

서버 -> 클라이언트
ACK(seq:2001, ack:1007)
제대로 보내졌는지 클라이언트는 ack를 보고 확인할 수 있다.


연결 종료(4번, 4wayhandshake라고 부른다. 근데 공식적으로는 없다. RFC공식 문서에 없다)

클라이언트 -> 서버
FIN/ACK(seq: 1007, ack: 2001)
+1

서버 -> 클라이언트
ACK(seq: 2001, ack: 1008)
FIN/ACK(seq: 2001, ack: 1008)
+1

클라이언트 -> 서버
ACK(seq: 1008, ack: 2002)

요청처리하면 ack에 1추가
-------------------------------------------------------------------------------
window7이 클라이언트
DDoS가 서버
kali가 

nc -l 4000
listen상태가 되었다.

클라이언트에서 nc.exe 192.168.0.171 4000을 하고
hello치면 서버에 hello 출력된다. 컨트롤 c하면 끝
kali에서 tcp.port==4000
edit -> preferences
tcp에서 relative sequence numbers 체크 해제
체크 해제하면 아까 공부했던 seq와 ack가 나온다.
terabase 4000번 포트
이게 4wayhandshake 방식



-------------------------------------------------------------
window7과 DDoS 연결은 확인
kali가 연결끊어라 같은 명령을 내린다.
끊으려면
1. 출발지 ip와 도착지 ip
2. port번호
3. seq번호

tcp덤프 사용
tcmdump -S -n port 4000
4000번 포트로 오는 것들을 dump한다.
nc -l 4000

kali에서 Flags [S] 이것이 의미하는 바는 SYN이다.
Flags [S.]은 SYN/ACK
Flags [.]은 ACK
Flags [P.]은 PSH/ACK
Flags [.] ACK

-L 은 ack넘버
-M 은 seq넘버
kali에서
hping3 -a 192.168.0.200 -s 49226 192.168.0.171 -p 4000 -L 0 -M 1505216479 -R -c 1
DDoS에서 보면 연결이 끊어져있다.
window7에서 보면 연결이 안끊어져있는 것처럼 보이지만 엔터 치면 끊어진다.

telnet끊기!
제어판에서 windows기능 사용에서 텔넷 클라이언트 체크
telnet 192.168.0.171
아이디:kisec
비번:kisec1234
연결 종료 방향 생각해서 telnet 연결 끊기

telnet은 port23 쓴다.
tcpdump -S -n port 23
이 상태에서 192.168.0.200 에서 어떤 문자(예를 들어 h)를 입력하면 
Flags [P.] = PSH/ACK -> h
Flags [P.] = PSH/ACK -> \n
Flags [.] = ACK






