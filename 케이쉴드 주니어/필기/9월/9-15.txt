점검내용, 점검목적 읽어보기
왜 하는지 등 당연히 알아야한다.


pam_securetty.so 모듈이 설정이 되어야
securetty가 실행된다.

서비스 활성화 여부를 먼저 확인 -> 그 다음 설정을 확인하기
만약 원격 터미널 서비스를 사용하지 않으면 설정을 볼 필요가 없다.
telnet 설정 뿐만아니라 ssh설정도 같이 확인
telnet 관련 설정
= 반드시 /etc/pam.d/remote 파일 안에 pam_securetty.so 설정이 있고 
/etc/securetty 파일에 pts/ 관련 설정이 없어야 양호 또는 telnet 서비스를 사용하지 않을 시 양호

취약시 고객에게
pwconv를 사용하여 shadow 파일을 사용하도록 말해야한다.





실습파일 계정 : kisec 비밀번호 : kisec123

# root 계정 원격 접속 제한
- 서비스 활성화 여부 확인 후 설정 확인
- 서비스가 비활성화 되어있으면 설정을 볼 필요가 없음
- telnet 설정 뿐만 아니라 ssh 관련 설정도 같이 확인을 하는 것이 좋음
- telnet 관련 설정
  = 반드시 /etc/pam.d/remote 파일 안에 pam_securetty.so 설정이 있고 /etc/securetty 파일에 pts/ 관련 설정이 없어야 양호 또는 telnet 서비스를 사용하지 않을 시 양호
 - ssh 관련 설정
  = ssh 서비스를 사용 중이지 않거나 /etc/ssh/sshd_config 파일 안에 PermitRootLogin 이 설정이 no 로 되어있으면 또는 PermitRootLogin 설정이 주석처리 되어있어도 양호
  = ssh 서비스를 사용 중이고 PermitRootLogin yes로 되어있으면 취약


- 실습 명령어
0. sudo -s
- root 계정으로 전환 명령어
1. ssh 설정 확인
  1) vi /etc/ssh/sshd_config 파일 열기
  2) PermitRootLogin 설정 확인

2. telnet 설정 확인
  1) yum install -y xinetd
  2) yum install -y telnet-server telnet
  3) service iptables status, service firewalld status
  3-1) 만약 해당 방화벽이 실행 중이면 service iptables stop 이런식으로 종료
  4) vi /etc/xinetd.d/telnet
  4-1) disable = yes 를 disable = no 로 변경
  5) vi /etc/pam.d/remote
  5-1) pam_securetty.so 모듈 설정 확인
  6) vi /etc/securetty
  6-1) 내부에 pts 설정 확인
  7) telnet 실행을 위하여 service xinetd restart
  8) telnet localhost 실행 후 root 계정으로 로그인 시도(로그인 실패)
  9) /etc/securetty 파일에 pts/0, pts/1, pts/2 설정 추가
  10) service xinetd restart
  11) telnet localhost 실행 후 root 계정으로 로그인 시도(로그인 성공)

3. 각 서비스 실행 여부 확인
  1) 프로세스 목록 확인 : ps -ef | grep telnet or ps -ef | grep ssh
  2) 포트 활성화 여부 확인 : netstat -ano | grep :23, netstat -ano | grep :22
      - 해당 서비스의 포트 번호 확인
        = cat /etc/services | grep "서비스 이름"0
  3) 서비스 실행 여부 확인
      - 서비스 명령어를 통한 확인 : service ssh status
      - xinetd 구동되어지는 서비스 확인
        = vi /etc/xinetd.d/"서비스 이름" 해당 파일 안에 disable 설정을 확인
           * yes 면 비활성화, no 면 활성화

* 최신버전 : CentOS 7 이상, Ubuntu 16.04 이상
initd -> systemd 최상의 프로세스가 변경되어지면서 리눅스 구조가 바뀜
명령어 변경
netstat -> ss
service -> systemctl
ifconfig -> ip addr

근데 만약에 netstat 나 ifconfig 같은 네트워크 관련 구 명령어를 사용하고 싶으면 아래처럼 설치하면 됨
yum install -y net-utils(CentOS 기준)

# 패스워드 복잡성 설정
CentOS : /etc/pam.d/system-auth
Ubuntu : /etc/pam.d/common-password

가이드라인 상에는 pam_cracklib.so 모듈 설정법만 있지만 실제로는 더 다양하게 설정을 할 수 있음
그 외 가능한 모듈 : pam_pwquality.so, pam_passwdqc.so

- pam_pwquailty.so
  = 해당 모듈을 관련된 파일쪽에 모듈만 설정을 하고 /etc/security/pwquality.conf 라는 파일을 생성해서 사용
  = pwquality.conf 파일 안에는 pam_cracklib.so 모듈처럼 설정
  = pam.d 디렉터리 쪽에 설정 시에 local_users_only 옵션은 일반 사용자만 적용되게끔 하는 옵션, enforce_for_root 로 변경해야 root 계정도 적용
  = /etc/security/pwquailty.conf 예시
     minlen = 8
     lcredit = 1
     ucredit = 1
     dcredit = 1
     ocredit = 1
   = 참고사이트 : https://allthatlinux.com/dokuwiki/doku.php?id=%EB%B3%B4%EC%95%88%EC%B7%A8%EC%95%BD%EC%A0%90_%EC%A0%90%EA%B2%80 


- pam_passwdqc.so
  = pam_cracklib.so 모듈은 root 사용자는 적용이 되지 않기 때문에 이 모듈을 함께 사용
  = 예시 : pam_passwdqc.so min=disabled,12,8,6,5 와 같이 설정
      * min=N1,N2,N3,N4,N5
        - N1 은 한 가지 문자 조합 시 암호 구성 길이
        - N2 는 두 가지 문자 조합 시 암호 구성 길이
        - N3 는 단어 포함 길이 설정
        - N4, N5 는 세 가지 문자 조합, 네 가지 문자 조합의 암호 구성 길이
  = 참고 사이트 : http://coffeenix.net/board_print.php?bd_code=1561


# 계정 잠금 임계값 설정
CentOS : /etc/pam.d/system-auth(로컬 접속), /etc/pam.d/password-auth(원격접속)
Ubuntu : /etc/pam.d/common-auth

설정 가능한 모듈 : pam_tally.so pam_tally2.so pam_failock.so

- 실습 명령어
1. vi /etc/pam.d/system-auth
2. auth 로 시작하는 부분 맨 위에 아래의 설정 추가
auth        required    pam_tally2.so deny=3
3. account 로 시작하는 부분 맨 위에 아래의 설정 추가
account     required    pam_tally2.so
4. pam_tally2 -u [USER] 명령어로 해당 계정의 틀린 횟수 조회 가능
5. root 계정으로 test 계정 생성
useradd test
passwd test
원하는 비밀번호 설정 또는 kisec123
6. kisec 계정으로 되어있는 새로운 터미널 실행
7. su test 3번 진행 후 4번째 부터는 계정 잠금 문구 출력
8. root 계정의 터미널에서 pam_tally2 -u test 해보면 계정 실패 횟수 확인 가능
9. pam_tally2 -u test --reset 해서 실패 횟수 초기화 가능
10. kisec 계정으로 되어있는 터미널에서 다시 su test 후 test 계정으로의 정상 전환 확인

# 패스워드 파일 보호
각 파일 마다 뒤에 - 표시가 붙은 파일은 변경되기 전 상태를 저장해놓은 백업 파일
예를 들어 우분투에서 adduser로 계정 생성 시 계정이 생성되고 /etc/passwd 파일을 /etc/passwd-로 백업하고 그 뒤의 설명은 후에 작업되어 내용이 다르다
그런 식으로 중요파일 이기 때문에 백업파일을 따로 두어 무언가 작업이 시작될 경우 백업을 진행한다.

pwconv(shadow 파일 사용)/ pwunconv(shadow 파일 사용 해제)

비밀번호가 두번째 필드인데 $1$가 어떤 해시암호 알고리즘을 사용했는지 알 수 있음
$1 = md5, $5 = sha256, $6 = sha512

! 또는 !! : 계정에 비밀번호가 설정되어있지 않아 잠가놓은 상태
* : 이 계정을 통해서 아예 로그인을 할 수 없음을 의미
빈 값 : 비밀번호 없이 로그인 할 수 있는 상태를 의미
- 리눅스 설치 시에 root 비밀번호를 설정하지 않고 설치를 하게되면
root 비밀번호가 빈 값으로 나오고 root 로 로그인할 때 비밀번호 필요 없이 로그인 가능

# /etc/passwd 파일 소유자 및 권한 설정
ls -al /etc/passwd 로 확인이 가능
권한에 대해서 8진수 값을 얻고 싶다면
stat -c "%a" /etc/passwd
소유자만 얻고 싶다면
stat -c "%U" /etc/passwd

644 이하 인데 577을 양호 처리하는 경우 오탐
6 > 5 : 소유자 권한
4 > 7 : 그룹 권한
4 > 7 : 그 외 권한

Unix 에서는 stat 명령어 대신 perl 스크립트를 사용

- 실습 명령어
1. yum install -y rsh*
2. vi /etc/xinetd.d/rlogin, rexec, rsh 파일 모두 활성화 여부 확인
disable = no
3. /etc/hosts.equiv, $HOME/.rhosts 파일들 확인
4. 각 파일의 권한과 소유자, '+' 설정 여부 확인

만약 서비스 실행 중이지만 해당 설정파일들이 존재하지 않을 경우 양호 처리

실행여부 확인 시 해당 포트도 같이 확인
exec(512), login(513), sh(514) 포트를 확인 

# 홈 디렉터리 소유자 및 권한 설정
이 항목은 홈 디렉터리가 존재하는 계정일 경우에만 권한을 확인하는 항목
홈 디렉터리 존재 여부 확인은 다음 항목에서 확인한다.

useradd, adduser
리눅스 기본 계정 생성 명령어는 useradd
CentOS의 경우에는 adduser -> useradd 로 심볼릭 링크가 설정되어 있어 결국 useradd로 실행되는 거나 마찬가지
Ubuntu의 경우 adduser가 펄 스크립트로 구성되어 있으며, 사용자 편의를 위해 useradd 옵션 값들을 한 줄씩 지정할 수 있도록 구성

useradd 명령어를 이용해서 생성하는 것이 기본
비밀번호는 passwd 명령어를 이용해서 생성하는 것이 기본

# finger 서비스 비활성화
finger 서비스 같은 경우 xinetd 로 실행되어짐
/etc/xinetd.d/finger 파일이 있는지 확인을 해서 disable 옵션 확인
yes or no 냐 확인

서비스 포트 같이 확인
cat /etc/services | grep finger
(netstat or ss) -ano | grep ':79'
















